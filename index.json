[{"content":"ddl-auto 란 JPA에서는 기본적으로 Entity에 테이블을 매핑하면 쿼리를 사용하지 않고 값을 가져올 수 있습니다.\n설정 옵션으로\njpa: hibernate: ddl-auto: create #create-drop, update, validate, none 각각의 옵션을 봐보면 아래와 같습니다.\n create : SessionFactory 시작시 스키마를 삭제하고 다시 생성 create-drop : SessionFactory 종료 시 스키마를 삭제 update : SessionFactory 연결된 DB와 비교하여 추가된 항목은 추가 만약 같은 변수명이면 오류발생 validate : SessionFactory 시작시 객체구성과 스키마가 다르다면 예외 발생 none: 아무것도 안함  실제 서비스 배포시에는 create, create-drop, update 와 같은 옵션을 사용하면 안되지만 개발 초기 테스트시에는 유용하게 사용할 수 있습니다.\n샘플데이터 추가 방법 그렇지만 데이터 테이블만 생기고 데이터가 없으니 오히려 테스트하기 불편한 점이 있습니다.\n그렇기에 찾아보니 역시 당연하게도.. resources 폴더에 import.sql 파일을 추가하면 hibernate에서 알아서 해당 더미데이터 쿼리를 찾아 실해시켜줍니다.\n만약 특정 파일을 지정하고 싶다면 아래와 같이\njpa: properties: hibernate: hbm2ddl: import_files: classpath:db/data.sql 파일명을 명시주면 create에 자동으로 해당 데이터를 insert 할 수 있습니다.\n예제 만약 아래와 같이 user 테이블이 있다면..\nimport java.time.LocalDateTime; import javax.persistence.Column; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.Table; import lombok.AccessLevel; import lombok.Builder; import lombok.Getter; import lombok.NoArgsConstructor; import org.hibernate.annotations.ColumnDefault; import org.hibernate.annotations.DynamicUpdate; @NoArgsConstructor(access = AccessLevel.PROTECTED) @Getter @Entity @DynamicUpdate @Table(name = \u0026#34;user\u0026#34;) public class UserEntity { @Id @GeneratedValue(strategy= GenerationType.IDENTITY) @Column(name = \u0026#34;user_sno\u0026#34;, nullable = false, updatable = false) private Long userSno; @Column(name = \u0026#34;user_id\u0026#34;, length = 15, nullable = false, unique = true) private String userId; @Column(name = \u0026#34;user_name\u0026#34;) private String userName; @Column(length = 100, nullable = false) private String password; @Column(length = 100) private String email; @Column(name=\u0026#34;create_dt\u0026#34;, nullable = false, updatable = false, insertable = false, columnDefinition = \u0026#34;TIMESTAMP DEFAULT CURRENT_TIMESTAMP\u0026#34;) private LocalDateTime createDt; @Column(name=\u0026#34;ues_yn\u0026#34;, nullable = false, updatable = false, insertable = false) @ColumnDefault(\u0026#34;0\u0026#34;) private int useYn; @Builder public UserEntity(Long userSno, String userId, String userName, String password, String email) { this.userSno = userSno; this.userId = userId; this.userName = userName; this.password = password; this.email = email; } } import.sql파일 또는 지정한 sql파일에 아래와 같이 코드를 추가해주면 빌드 시 자동적으로 데이터를 넣을 수 있습니다.\ninsertinto`user`(`email`,`password`,`user_id`,`user_name`)values(\u0026#39;admin@admin.com\u0026#39;,\u0026#39;$2a$10$dyiw3YfbmBkHlUdbgWhsYesqniOsXo71KBzF75le5.YtS/rsrsM22\u0026#39;,\u0026#39;admin\u0026#39;,\u0026#39;관리자\u0026#39;);insertinto`user`(`email`,`password`,`user_id`,`user_name`)values(\u0026#39;test@test.com\u0026#39;,\u0026#39;$2a$10$PMc5QFOUViVsGmsNMQqUzOuQG2rZ2wUJjSTRGFkBo9jZR/CSnQ03K\u0026#39;,\u0026#39;test\u0026#39;,\u0026#39;테스트\u0026#39;);주의할 점은 실제 배포시에는 꼭 ddl-auto를 none으로 하여 데이터가 날라가는 불상사가 없어야 할 것 같습니다.\n","permalink":"https://haservi.github.io/posts/spring/jpa/hibernate-ddl-auto/","summary":"ddl-auto 란 JPA에서는 기본적으로 Entity에 테이블을 매핑하면 쿼리를 사용하지 않고 값을 가져올 수 있습니다.\n설정 옵션으로\njpa: hibernate: ddl-auto: create #create-drop, update, validate, none 각각의 옵션을 봐보면 아래와 같습니다.\n create : SessionFactory 시작시 스키마를 삭제하고 다시 생성 create-drop : SessionFactory 종료 시 스키마를 삭제 update : SessionFactory 연결된 DB와 비교하여 추가된 항목은 추가 만약 같은 변수명이면 오류발생 validate : SessionFactory 시작시 객체구성과 스키마가 다르다면 예외 발생 none: 아무것도 안함  실제 서비스 배포시에는 create, create-drop, update 와 같은 옵션을 사용하면 안되지만 개발 초기 테스트시에는 유용하게 사용할 수 있습니다.","title":"JPA ddl-auto 설정과 더미데이터 생성 방법"},{"content":"조이스틱 문제 설명 조이스틱으로 알파벳 이름을 완성하세요. 맨 처음엔 A로만 이루어져 있습니다.\nex) 완성해야 하는 이름이 세 글자면 AAA, 네 글자면 AAAA\n조이스틱을 각 방향으로 움직이면 아래와 같습니다.\n▲ - 다음 알파벳 ▼ - 이전 알파벳 (A에서 아래쪽으로 이동하면 Z로) ◀ - 커서를 왼쪽으로 이동 (첫 번째 위치에서 왼쪽으로 이동하면 마지막 문자에 커서) ▶ - 커서를 오른쪽으로 이동 예를 들어 아래의 방법으로 \u0026ldquo;JAZ\u0026quot;를 만들 수 있습니다.\n- 첫 번째 위치에서 조이스틱을 위로 9번 조작하여 J를 완성합니다. - 조이스틱을 왼쪽으로 1번 조작하여 커서를 마지막 문자 위치로 이동시킵니다. - 마지막 위치에서 조이스틱을 아래로 1번 조작하여 Z를 완성합니다. 따라서 11번 이동시켜 \u0026quot;JAZ\u0026quot;를 만들 수 있고, 이때가 최소 이동입니다. 만들고자 하는 이름 name이 매개변수로 주어질 때, 이름에 대해 조이스틱 조작 횟수의 최솟값을 return 하도록 solution 함수를 만드세요.\n제한 사항  name은 알파벳 대문자로만 이루어져 있습니다. name의 길이는 1 이상 20 이하입니다.  입출력 예    name return     \u0026ldquo;JEROEN\u0026rdquo; 56   \u0026ldquo;JAN\u0026rdquo; 23    출처 ※ 공지 - 2019년 2월 28일 테스트케이스가 추가되었습니다.\n문제 풀이 리뷰 몇일을 고민한 문제이다. 알파벳 위아래의 최소값은 간단히 구하였지만, 좌우의 최소거리를 찾는 부분에서 생각을 많이하였다.\n기본적으로 모든 알파벳 위치에서의 최소거리를 구하고, 바로앞의 A가 있다면 해당 값을 제외한 뒤에 거리를 정의해야한다.\n또한, 해당 인덱스의 위치에서 정방향과 역방향에서 둘 중의 거리가 짧은 곳을 구한 뒤 바로앞의 A를 제외한 총이동거리를 더하는 부분이 중요하다.\n그렇게 모든 알파벳의 좌우 이동 최소거리 중 가장작은 값을 상하 알파벳 이동값과 더하여 주면된다.\nSource code public int solution(String name) { int answer = 0; int nameLength = name.length(); int changeAlpabatCount = 0; for (int i = 0; i \u0026lt; nameLength; i++) { // 알파벳 변경 시 최소값 선정 후 화살표 위아래 변경 횟수 추가  changeAlpabatCount += Math.min(name.charAt(i) - \u0026#39;A\u0026#39;, \u0026#39;Z\u0026#39; - name.charAt(i) + 1); } // 알파벳의 정방향 최대 이동거리를 최소거리로 지정  int minMove = nameLength - 1; for (int i = 0; i \u0026lt; nameLength; i++) { int next = i + 1; int nextCountA = 0; while (next \u0026lt; nameLength \u0026amp;\u0026amp; name.charAt(next) == \u0026#39;A\u0026#39;) { next++; nextCountA++; } // 0번쨰 인덱스에서 앞의 A를 제외하고 이동한 거리  int moveWithoutA = name.length() - nextCountA - 1; // System.out.println(\u0026#34;movewithA:\u0026#34; + moveWithoutA);  // 처음부터 i번째 까지 왔다가 돌아가는 방식과 뒤에서 출발하여 i번째 까지 오는 방식중 작은 값 선택  int min = Math.min(i, name.length() - next); // 알파벳을 순회하며 작은 값을 선택  minMove = Math.min(minMove, moveWithoutA + min); // System.out.println(i + \u0026#34;번째값의 평균 이동 거리는 \u0026#34; + (moveWithoutA + min) + \u0026#34;이다.\u0026#34;);  } // System.out.println(\u0026#34;총 알파벳 변경 회수는 \u0026#34; + changeAlpabatCount + \u0026#34;이며, 최소이동 거리는 \u0026#34; + minMove + \u0026#34;이다.\u0026#34;);  answer = (changeAlpabatCount + minMove); return answer; } ","permalink":"https://haservi.github.io/posts/algorithms/programmers/level2/03-joystick/","summary":"조이스틱 문제 설명 조이스틱으로 알파벳 이름을 완성하세요. 맨 처음엔 A로만 이루어져 있습니다.\nex) 완성해야 하는 이름이 세 글자면 AAA, 네 글자면 AAAA\n조이스틱을 각 방향으로 움직이면 아래와 같습니다.\n▲ - 다음 알파벳 ▼ - 이전 알파벳 (A에서 아래쪽으로 이동하면 Z로) ◀ - 커서를 왼쪽으로 이동 (첫 번째 위치에서 왼쪽으로 이동하면 마지막 문자에 커서) ▶ - 커서를 오른쪽으로 이동 예를 들어 아래의 방법으로 \u0026ldquo;JAZ\u0026quot;를 만들 수 있습니다.\n- 첫 번째 위치에서 조이스틱을 위로 9번 조작하여 J를 완성합니다.","title":"조이스틱"},{"content":"다리를 지나는 트럭 문제 설명 트럭 여러 대가 강을 가로지르는 일차선 다리를 정해진 순으로 건너려 합니다.\n모든 트럭이 다리를 건너려면 최소 몇 초가 걸리는지 알아내야 합니다.\n다리에는 트럭이 최대 bridge_length대 올라갈 수 있으며, 다리는 weight 이하까지의 무게를 견딜 수 있습니다.\n단, 다리에 완전히 오르지 않은 트럭의 무게는 무시합니다.\n예를 들어, 트럭 2대가 올라갈 수 있고 무게를 10kg까지 견디는 다리가 있습니다. 무게가 [7, 4, 5, 6]kg인 트럭이 순서대로 최단 시간 안에 다리를 건너려면 다음과 같이 건너야 합니다.\n   경과 시간 다리를 지난 트럭 다리를 건너는 트럭 대기 트럭     0 [] [] [7,4,5,6]   1~2 [] [7] [4,5,6]   3 [7] [4] [5,6]   4 [7] [4,5] [6]   5 [7,4] [5] [6]   6~7 [7,4,5] [6] []   8 [7,4,5,6] [] []    따라서, 모든 트럭이 다리를 지나려면 최소 8초가 걸립니다.\nsolution 함수의 매개변수로 다리에 올라갈 수 있는 트럭 수 bridge_length, 다리가 견딜 수 있는 무게 weight, 트럭 별 무게 truck_weights가 주어집니다.\n이때 모든 트럭이 다리를 건너려면 최소 몇 초가 걸리는지 return 하도록 solution 함수를 완성하세요.\n제한 조건  bridge_length는 1 이상 10,000 이하입니다. weight는 1 이상 10,000 이하입니다. truck_weights의 길이는 1 이상 10,000 이하입니다. 모든 트럭의 무게는 1 이상 weight 이하입니다.  입출력 예    bridge_length weight truck_weights return     2 10 [7,4,5,6] 8   100 100 [10] 101   100 100 [10,10,10,10,10,10,10,10,10,10] 110    ","permalink":"https://haservi.github.io/posts/algorithms/programmers/level2/02-truck-crossing-the-bridge/","summary":"다리를 지나는 트럭 문제 설명 트럭 여러 대가 강을 가로지르는 일차선 다리를 정해진 순으로 건너려 합니다.\n모든 트럭이 다리를 건너려면 최소 몇 초가 걸리는지 알아내야 합니다.\n다리에는 트럭이 최대 bridge_length대 올라갈 수 있으며, 다리는 weight 이하까지의 무게를 견딜 수 있습니다.\n단, 다리에 완전히 오르지 않은 트럭의 무게는 무시합니다.\n예를 들어, 트럭 2대가 올라갈 수 있고 무게를 10kg까지 견디는 다리가 있습니다. 무게가 [7, 4, 5, 6]kg인 트럭이 순서대로 최단 시간 안에 다리를 건너려면 다음과 같이 건너야 합니다.","title":"다리를 지나는 트럭"},{"content":"목적  하루에 하나씩 알고리즘을 풀어 개인 공부 및 실력 향상을 도모하고자 문제풀이를 하였다.\n Level1 문제 난이도 기초적인 반복문을 이해하고 있으며, 간단한 자료구조를 알고 있으면 문제를 푸는데 큰 지장이 없는 것 같다.\nLevel1의 경우 하루에 하나씩 문제를 풀어도 큰 부담이 안됐던 것 같다.\nLevel1을 마무리하고 이제 Level2의 문제를 풀고 있다.\n아무래도 Level1 보다는 조금 더 시간이 걸리고 뭔가 기초가 부족하다는 것을 느끼게 됐다.\n알고리즘 문제를 풀며, 꾸준히 기본적인 자료구조와 서적을 통해 기초를 더 쌓아야 할 것 같다..😅\n","permalink":"https://haservi.github.io/posts/algorithms/programmers/review/clear-level1/","summary":"목적  하루에 하나씩 알고리즘을 풀어 개인 공부 및 실력 향상을 도모하고자 문제풀이를 하였다.\n Level1 문제 난이도 기초적인 반복문을 이해하고 있으며, 간단한 자료구조를 알고 있으면 문제를 푸는데 큰 지장이 없는 것 같다.\nLevel1의 경우 하루에 하나씩 문제를 풀어도 큰 부담이 안됐던 것 같다.\nLevel1을 마무리하고 이제 Level2의 문제를 풀고 있다.\n아무래도 Level1 보다는 조금 더 시간이 걸리고 뭔가 기초가 부족하다는 것을 느끼게 됐다.\n알고리즘 문제를 풀며, 꾸준히 기본적인 자료구조와 서적을 통해 기초를 더 쌓아야 할 것 같다.","title":"프로그래머스 Level1 문제풀이 후기"},{"content":"위장 문제 설명 스파이들은 매일 다른 옷을 조합하여 입어 자신을 위장합니다.\n예를 들어 스파이가 가진 옷이 아래와 같고 오늘 스파이가 동그란 안경, 긴 코트, 파란색 티셔츠를 입었다면 다음날은 청바지를 추가로 입거나 동그란 안경 대신 검정 선글라스를 착용하거나 해야 합니다.\n   종류 이름     얼굴 동그란 안경, 검정 선글라스   상의 파란색 티셔츠   하의 청바지   겉옷 긴 코트    스파이가 가진 의상들이 담긴 2차원 배열 clothes가 주어질 때 서로 다른 옷의 조합의 수를 return 하도록 solution 함수를 작성해주세요.\n제한사항  clothes의 각 행은 [의상의 이름, 의상의 종류]로 이루어져 있습니다. 스파이가 가진 의상의 수는 1개 이상 30개 이하입니다. 같은 이름을 가진 의상은 존재하지 않습니다. clothes의 모든 원소는 문자열로 이루어져 있습니다. 모든 문자열의 길이는 1 이상 20 이하인 자연수이고 알파벳 소문자 또는 \u0026lsquo;_\u0026rsquo; 로만 이루어져 있습니다. 스파이는 하루에 최소 한 개의 의상은 입습니다.  입출력 예    clothes return     [[\u0026ldquo;yellowhat\u0026rdquo;, \u0026ldquo;headgear\u0026rdquo;], [\u0026ldquo;bluesunglasses\u0026rdquo;, \u0026ldquo;eyewear\u0026rdquo;], [\u0026ldquo;green_turban\u0026rdquo;, \u0026ldquo;headgear\u0026rdquo;]] 5   [[\u0026ldquo;crowmask\u0026rdquo;, \u0026ldquo;face\u0026rdquo;], [\u0026ldquo;bluesunglasses\u0026rdquo;, \u0026ldquo;face\u0026rdquo;], [\u0026ldquo;smoky_makeup\u0026rdquo;, \u0026ldquo;face\u0026rdquo;]] 3    입출력 예 설명 예제 #1\nheadgear에 해당하는 의상이 yellow_hat, green_turban이고 eyewear에 해당하는 의상이 blue_sunglasses이므로 아래와 같이 5개의 조합이 가능합니다.\n1. yellow_hat 2. blue_sunglasses 3. green_turban 4. yellow_hat + blue_sunglasses 5. green_turban + blue_sunglasses 예제 #2 face에 해당하는 의상이 crow_mask, blue_sunglasses, smoky_makeup이므로 아래와 같이 3개의 조합이 가능합니다.\n1. crow_mask 2. blue_sunglasses 3. smoky_makeup 문제 풀이 문제 풀이 리뷰  확률 문제이다. 예를 들어 정육각형 주사위A 주사위B 2개로 나오는 경우의 수는 6 * 6으로 36개이다. 그렇지만 주사위 객체 1개도 경우의 수로 인정하게 되면 (7 x 7) - 1로 48개 이다. 여기서 -1은 주사위가 없는 경우라고 생각할 수 있다. 해당 문제도 같은 방식으로 이해하면 각 옷들은 주사위이고 옷의 개수는 주사위의 번호 개수이다. 예를 들어 옷의 종류가 3개이며, 각각 2벌씩이면 ((2 + 1) * (2 + 1) * (2 + 1)) - 1 = 26 이다. 해당 문제의 풀이 방법은 어느 정도 알았지만, hashMap의 확장함수로 getOrDefault가 있다는 것을 알게됐다. getOrDefault의 두 번째 매개변수인 defaultValue는 지정된 키로 매핑된 값이 없으면 반환되는 값이다.  Source code Java (Source code) public int solution(String[][] clothes) { int answer = 1; int clothCount = clothes.length; HashMap\u0026lt;String, Integer\u0026gt; hashMap = new HashMap\u0026lt;String, Integer\u0026gt;(); for (int i = 0; i \u0026lt; clothCount; i++) { int clothSum = hashMap.getOrDefault(clothes[i][1], 0) + 1; hashMap.put(clothes[i][1], clothSum); } for (int count : hashMap.values()) { answer = answer * (count + 1); } answer = answer - 1; return answer; } ","permalink":"https://haservi.github.io/posts/algorithms/programmers/level2/01-camouflage/","summary":"위장 문제 설명 스파이들은 매일 다른 옷을 조합하여 입어 자신을 위장합니다.\n예를 들어 스파이가 가진 옷이 아래와 같고 오늘 스파이가 동그란 안경, 긴 코트, 파란색 티셔츠를 입었다면 다음날은 청바지를 추가로 입거나 동그란 안경 대신 검정 선글라스를 착용하거나 해야 합니다.\n   종류 이름     얼굴 동그란 안경, 검정 선글라스   상의 파란색 티셔츠   하의 청바지   겉옷 긴 코트    스파이가 가진 의상들이 담긴 2차원 배열 clothes가 주어질 때 서로 다른 옷의 조합의 수를 return 하도록 solution 함수를 작성해주세요.","title":"위장"},{"content":"하샤드 수 문제 설명 양의 정수 x가 하샤드 수이려면 x의 자릿수의 합으로 x가 나누어져야 합니다.\n예를 들어 18의 자릿수 합은 1+8=9이고, 18은 9로 나누어 떨어지므로 18은 하샤드 수입니다.\n자연수 x를 입력받아 x가 하샤드 수인지 아닌지 검사하는 함수, solution을 완성해주세요.\n제한 조건  x는 1 이상, 10000 이하인 정수입니다.  입출력 예    arr return     10 true   12 true   11 false   13 false    입출력 예 설명 입출력 예 #1\n10의 모든 자릿수의 합은 1입니다. 10은 1로 나누어 떨어지므로 10은 하샤드 수입니다.\n입출력 예 #2\n12의 모든 자릿수의 합은 3입니다. 12는 3으로 나누어 떨어지므로 12는 하샤드 수입니다.\n입출력 예 #3\n11의 모든 자릿수의 합은 2입니다. 11은 2로 나누어 떨어지지 않으므로 11는 하샤드 수가 아닙니다.\n입출력 예 #4\n13의 모든 자릿수의 합은 4입니다. 13은 4로 나누어 떨어지지 않으므로 13은 하샤드 수가 아닙니다.\n문제 풀이 리뷰  [Java](https://github.com/haservi/study-algorithm/blob/main/programmers/Level1/lv1_47_%ED%95%98%EC%83%A4%EB%93%9C_%EC%88%98/Solution.java   각 자리수의 합을 구한 뒤 나머지가 0인 경우 true를 반환한다.  나의 풀이(Source code) public boolean solution(int x) { int sum = 0; int num = x; // 자릿수의 합  while (num != 0) { sum += num % 10; num /= 10; } // 나머지가 0이면 하샤드 수라고 판단  if (x % sum == 0) return true; else return false; } ","permalink":"https://haservi.github.io/posts/algorithms/programmers/level1/04-algo-hasshadsu/","summary":"하샤드 수 문제 설명 양의 정수 x가 하샤드 수이려면 x의 자릿수의 합으로 x가 나누어져야 합니다.\n예를 들어 18의 자릿수 합은 1+8=9이고, 18은 9로 나누어 떨어지므로 18은 하샤드 수입니다.\n자연수 x를 입력받아 x가 하샤드 수인지 아닌지 검사하는 함수, solution을 완성해주세요.\n제한 조건  x는 1 이상, 10000 이하인 정수입니다.  입출력 예    arr return     10 true   12 true   11 false   13 false    입출력 예 설명 입출력 예 #1","title":"하샤드 수"},{"content":"콜라츠 추측 문제 설명 1937년 Collatz란 사람에 의해 제기된 이 추측은, 주어진 수가 1이 될때까지 다음 작업을 반복하면, 모든 수를 1로 만들 수 있다는 추측입니다. 작업은 다음과 같습니다.\n1-1. 입력된 수가 짝수라면 2로 나눕니다. 1-2. 입력된 수가 홀수라면 3을 곱하고 1을 더합니다. 2. 결과로 나온 수에 같은 작업을 1이 될 때까지 반복합니다. 예를 들어, 입력된 수가 6이라면 6→3→10→5→16→8→4→2→1 이 되어 총 8번 만에 1이 됩니다.\n위 작업을 몇 번이나 반복해야하는지 반환하는 함수, solution을 완성해 주세요.\n단, 작업을 500번을 반복해도 1이 되지 않는다면 –1을 반환해 주세요.\n제한 사항  입력된 수, num은 1 이상 8000000 미만인 정수입니다.  입출력 예    n result     6 8   16 4   626331 -1    입출력 예 설명 입출력 예 #1\n문제의 설명과 같습니다.\n입출력 예 #2\n16 -\u0026gt; 8 -\u0026gt; 4 -\u0026gt; 2 -\u0026gt; 1 이되어 총 4번만에 1이 됩니다.\n입출력 예 #3\n626331은 500번을 시도해도 1이 되지 못하므로 -1을 리턴해야합니다.\n문제 풀이 문제 풀이 리뷰  반복적으로 돌면서 짝수이면 2로 나누고 홀수이면 해당값에 3을 곱한 후 1을 더해준다. 해당 반복이 500회가 되면 -1을 리턴한다.  Java (Source code) public int solution(long num) { int answer = 0; while (num != 1) { if (num % 2 == 0) { num = num / 2; } else { num = (num * 3) + 1; } answer++; if (answer == 500) { return -1; } } return answer; } ","permalink":"https://haservi.github.io/posts/algorithms/programmers/level1/03-algo-colatz-guess/","summary":"콜라츠 추측 문제 설명 1937년 Collatz란 사람에 의해 제기된 이 추측은, 주어진 수가 1이 될때까지 다음 작업을 반복하면, 모든 수를 1로 만들 수 있다는 추측입니다. 작업은 다음과 같습니다.\n1-1. 입력된 수가 짝수라면 2로 나눕니다. 1-2. 입력된 수가 홀수라면 3을 곱하고 1을 더합니다. 2. 결과로 나온 수에 같은 작업을 1이 될 때까지 반복합니다. 예를 들어, 입력된 수가 6이라면 6→3→10→5→16→8→4→2→1 이 되어 총 8번 만에 1이 됩니다.\n위 작업을 몇 번이나 반복해야하는지 반환하는 함수, solution을 완성해 주세요.","title":"콜라츠 추측"},{"content":"직업군 추천하기 문제 설명 개발자가 사용하는 언어와 언어 선호도를 입력하면 그에 맞는 직업군을 추천해주는 알고리즘을 개발하려고 합니다.\n아래 표는 5개 직업군 별로 많이 사용하는 5개 언어에 직업군 언어 점수를 부여한 표입니다.\n   점수 SI CONTENTS HARDWARE PORTAL GAME     5 JAVA JAVASCRIPT C JAVA C++   4 JAVASCRIPT JAVA C++ JAVASCRIPT C#   3 SQL PYTHON PYTHON PYTHON JAVASCRIPT   2 PYTHON SQL JAVA KOTLIN C   1 C# C++ JAVASCRIPT PHP JAVA    예를 들면, SQL의 SI 직업군 언어 점수는 3점이지만 CONTENTS 직업군 언어 점수는 2점입니다.\nSQL의 HARDWARE, PORTAL, GAME 직업군 언어 점수는 0점입니다.\n직업군 언어 점수를 정리한 문자열 배열 table, 개발자가 사용하는 언어를 담은 문자열 배열 languages, 언어 선호도를 담은 정수 배열 preference가 매개변수로 주어집니다.\n개발자가 사용하는 언어의 언어 선호도 x 직업군 언어 점수의 총합이 가장 높은 직업군을 return 하도록 solution 함수를 완성해주세요.\n총합이 같은 직업군이 여러 개일 경우, 이름이 사전 순으로 가장 빠른 직업군을 return 해주세요.\n제한사항  table의 길이 = 5  table의 원소는 \u0026ldquo;직업군 5점언어 4점언어 3점언어 2점언어 1점언어\u0026quot;형식의 문자열입니다. 직업군, 5점언어, 4언어, 3점언어, 2점언어, 1점언어는 하나의 공백으로 구분되어 있습니다. table은 모든 테스트케이스에서 동일합니다.   1 ≤ languages의 길이 ≤ 9  languages의 원소는 \u0026ldquo;JAVA\u0026rdquo;, \u0026ldquo;JAVASCRIPT\u0026rdquo;, \u0026ldquo;C\u0026rdquo;, \u0026ldquo;C++\u0026rdquo; ,\u0026ldquo;C#\u0026rdquo; , \u0026ldquo;SQL\u0026rdquo;, \u0026ldquo;PYTHON\u0026rdquo;, \u0026ldquo;KOTLIN\u0026rdquo;, \u0026ldquo;PHP\u0026rdquo; 중 한 개 이상으로 이루어져 있습니다. languages의 원소는 중복되지 않습니다.   preference의 길이 = languages의 길이  1 ≤ preference의 원소 ≤ 10   preference의 i번째 원소는 languages의 i번째 원소의 언어 선호도입니다. return 할 문자열은 \u0026ldquo;SI\u0026rdquo;, \u0026ldquo;CONTENTS\u0026rdquo;, \u0026ldquo;HARDWARE\u0026rdquo;, \u0026ldquo;PORTAL\u0026rdquo;, \u0026ldquo;GAME\u0026rdquo; 중 하나입니다.  입출력 예    table languages preference result     [\u0026ldquo;SI JAVA JAVASCRIPT SQL PYTHON C#\u0026rdquo;, \u0026ldquo;CONTENTS JAVASCRIPT JAVA PYTHON SQL C++\u0026rdquo;, \u0026ldquo;HARDWARE C C++ PYTHON JAVA JAVASCRIPT\u0026rdquo;, \u0026ldquo;PORTAL JAVA JAVASCRIPT PYTHON KOTLIN PHP\u0026rdquo;, \u0026ldquo;GAME C++ C# JAVASCRIPT C JAVA\u0026rdquo;] [\u0026ldquo;PYTHON\u0026rdquo;, \u0026ldquo;C++\u0026rdquo;, \u0026ldquo;SQL\u0026rdquo;] [7, 5, 5] \u0026ldquo;HARDWARE\u0026rdquo;   [\u0026ldquo;SI JAVA JAVASCRIPT SQL PYTHON C#\u0026rdquo;, \u0026ldquo;CONTENTS JAVASCRIPT JAVA PYTHON SQL C++\u0026rdquo;, \u0026ldquo;HARDWARE C C++ PYTHON JAVA JAVASCRIPT\u0026rdquo;, \u0026ldquo;PORTAL JAVA JAVASCRIPT PYTHON KOTLIN PHP\u0026rdquo;, \u0026ldquo;GAME C++ C# JAVASCRIPT C JAVA\u0026rdquo;] [\u0026ldquo;JAVA\u0026rdquo;, \u0026ldquo;JAVASCRIPT\u0026rdquo;] [7, 5] \u0026ldquo;PORTAL\u0026rdquo;    입출력 예 설명 입출력 예 #1\n각 직업군 별로 점수를 계산해보면 아래와 같습니다.\n아래 사진은 개발자 언어 선호도 나타낸 표입니다.     Python C++ SQL     선호도 7 5 5    아래 사진은 개발자가 선호하는 언어의 직업군 언어 점수를 나타낸 표입니다.     SI CONTENTS HARDWARE PORTAL GAME     PYTHON 2 3 3 3 0   c++ 0 1 4 0 5   SQL 3 2 0 0 0   직업군별 점수 식 $72 + 50 + 5*3$ $73 + 51 + 5*2$ $73 + 54 + 5*0$ $73 + 50 + 5*0$ $70 + 55 + 5*0$   점수 총합 29 36 41 21 25    따라서 점수 총합이 41로 가장 높은 \u0026quot;HARDWARE\u0026quot;를 return 해야 합니다.\n입출력 예 #2 각 직업군 별로 점수를 계산해보면 아래와 같습니다.\n아래 사진은 개발자 언어 선호도 나타낸 표입니다.     JAVA JAVASCRIPT     선호도 7 5    아래 사진은 개발자가 선호하는 언어의 직업군 언어 점수를 나타낸 표입니다.     SI CONTENTS HARDWARE PORTAL GAME     JAVA 5 4 2 5 1   JAVASCRIPT 4 5 1 4 3   직업군별 점수 식 $75 + 54$ $74 + 55$ $72 + 51$ $75 + 54$ $71 + 53$   점수 총합 55 53 19 55 22    점수 총합이 55로 가장 높은 직업군은 \u0026ldquo;SI\u0026rdquo; 와 \u0026ldquo;PORTAL\u0026quot;입니다. 따라서 사전 순으로 먼저 오는 \u0026quot;PORTAL\u0026quot;을 return 해야 합니다.\n문제 풀이 리뷰  Java   TreeMap에 language 값에 맞는 table의 배열을 맞춘 후 preference 값을 더하였다. 이렇게 하면 자동적으로 언어 별 점수의 합이 정렬된다. 이 후 점수 가 큰 순서로 내림차순 한 뒤 첫번째 값을 리턴하였다.  import java.util.*; class Solution { public static void main(String[] args) { Solution solution = new Solution(); String[] table = { \u0026#34;BI JAVA JAVASCRIPT SQL PYTHON C#\u0026#34;, \u0026#34;AONTENTS JAVASCRIPT JAVA PYTHON SQL C++\u0026#34;, \u0026#34;HARDWARE C C++ PYTHON JAVA JAVASCRIPT\u0026#34;, \u0026#34;AORTAL JAVA JAVASCRIPT PYTHON KOTLIN PHP\u0026#34;, \u0026#34;GAME C++ C# JAVASCRIPT C JAVA\u0026#34; }; String[] languages = { \u0026#34;JAVA\u0026#34;, \u0026#34;JAVASCRIPT\u0026#34; }; int[] preference = { 7, 5 }; String result = solution.solution(table, languages, preference); System.out.println(\u0026#34;결과 : \u0026#34; + result); } public String solution(String[] table, String[] languages, int[] preference) { Map\u0026lt;String, Integer\u0026gt; jobResultMap = new TreeMap\u0026lt;String, Integer\u0026gt;(); // ValueComparator bvc = new ValueComparator(jobResultMap);  // TreeMap\u0026lt;String, Integer\u0026gt; sortedMap = new TreeMap\u0026lt;String, Integer\u0026gt;(bvc);  int tableCount = table.length; for (int i = 0; i \u0026lt; tableCount; i++) { String[] splitTable = table[i].split(\u0026#34; \u0026#34;); // 해당 점수별로 값 넣기  jobResultMap.put(splitTable[0], 0); for (int j = 1; j \u0026lt; splitTable.length; j++) { for (int k = 0; k \u0026lt; languages.length; k++) { if (splitTable[j].equals(languages[k])) { jobResultMap.put(splitTable[0], jobResultMap.get(splitTable[0]) + (splitTable.length - j) * preference[k]); } } } } List\u0026lt;String\u0026gt; listKeySet = new ArrayList\u0026lt;\u0026gt;(jobResultMap.keySet()); Collections.sort(listKeySet, (value1, value2) -\u0026gt; (jobResultMap.get(value2).compareTo(jobResultMap.get(value1)))); String answer = listKeySet.get(0); System.out.println(jobResultMap.toString()); System.out.println(listKeySet.toString()); return answer; } } ","permalink":"https://haservi.github.io/posts/algorithms/programmers/level1/02-algo-recommend-job/","summary":"직업군 추천하기 문제 설명 개발자가 사용하는 언어와 언어 선호도를 입력하면 그에 맞는 직업군을 추천해주는 알고리즘을 개발하려고 합니다.\n아래 표는 5개 직업군 별로 많이 사용하는 5개 언어에 직업군 언어 점수를 부여한 표입니다.\n   점수 SI CONTENTS HARDWARE PORTAL GAME     5 JAVA JAVASCRIPT C JAVA C++   4 JAVASCRIPT JAVA C++ JAVASCRIPT C#   3 SQL PYTHON PYTHON PYTHON JAVASCRIPT   2 PYTHON SQL JAVA KOTLIN C   1 C# C++ JAVASCRIPT PHP JAVA    예를 들면, SQL의 SI 직업군 언어 점수는 3점이지만 CONTENTS 직업군 언어 점수는 2점입니다.","title":"직업군 추천하기"},{"content":"비밀지도 문제 설명 네오는 평소 프로도가 비상금을 숨겨놓는 장소를 알려줄 비밀지도를 손에 넣었다.\n그런데 이 비밀지도는 숫자로 암호화되어 있어 위치를 확인하기 위해서는 암호를 해독해야 한다.\n다행히 지도 암호를 해독할 방법을 적어놓은 메모도 함께 발견했다.\n 지도는 한 변의 길이가 n인 정사각형 배열 형태로, 각 칸은 \u0026ldquo;공백\u0026rdquo;(\u0026quot; \u0026ldquo;) 또는 \u0026ldquo;벽\u0026rdquo;(\u0026quot;#\u0026quot;) 두 종류로 이루어져 있다. 전체 지도는 두 장의 지도를 겹쳐서 얻을 수 있다. 각각 \u0026ldquo;지도 1\u0026quot;과 \u0026ldquo;지도 2\u0026quot;라고 하자.\n지도 1 또는 지도 2 중 어느 하나라도 벽인 부분은 전체 지도에서도 벽이다.\n지도 1과 지도 2에서 모두 공백인 부분은 전체 지도에서도 공백이다. \u0026ldquo;지도 1\u0026quot;과 \u0026ldquo;지도 2\u0026quot;는 각각 정수 배열로 암호화되어 있다. 암호화된 배열은 지도의 각 가로줄에서 벽 부분을 1, 공백 부분을 0으로 부호화했을 때 얻어지는 이진수에 해당하는 값의 배열이다.  네오가 프로도의 비상금을 손에 넣을 수 있도록, 비밀지도의 암호를 해독하는 작업을 도와줄 프로그램을 작성하라.\n입력 형식 입력으로 지도의 한 변 크기 n 과 2개의 정수 배열 arr1, arr2가 들어온다.\n 1 ≦ n ≦ 16 arr1, arr2는 길이 n인 정수 배열로 주어진다. 정수 배열의 각 원소 x를 이진수로 변환했을 때의 길이는 n 이하이다. 즉, 0 ≦ x ≦ 2n - 1을 만족한다.  출력 형식 원래의 비밀지도를 해독하여 '#', 공백으로 구성된 문자열 배열로 출력하라.\n입출력 예제    매개변수 값     n 5   arr1 [9, 20, 28, 18, 11]   arr2 [30, 1, 21, 17, 28]   출력 [\u0026quot;#####\u0026rdquo;,\u0026quot;# # #\u0026rdquo;, \u0026ldquo;### #\u0026rdquo;, \u0026ldquo;# ##\u0026rdquo;, \u0026ldquo;#####\u0026quot;]       매개변수 값     n 6   arr1 [46, 33, 33 ,22, 31, 50]   arr2 [27 ,56, 19, 14, 14, 10]   출력 [\u0026quot;######\u0026rdquo;, \u0026ldquo;### #\u0026rdquo;, \u0026ldquo;## ##\u0026rdquo;, \u0026quot; #### \u0026ldquo;, \u0026quot; #####\u0026rdquo;, \u0026ldquo;### # \u0026ldquo;]    문제 풀이 리뷰  각각의 미로의 길을 이진화 한다. 만약 이진수의 값의 앞 공백이 있는 경우 \u0026ldquo;0\u0026quot;을 추가해준다. 서로 비교하여 0인 경우는 \u0026quot; \u0026ldquo;, 그렇지 않은 경우 \u0026ldquo;#\u0026ldquo;을 추가해준다.  해결 코드 import java.util.*; class Solution { public static void main(String[] args) { Solution solution = new Solution(); int n = 5; int[] arr1 = { 9, 20, 28, 18, 11 }; int[] arr2 = { 30, 1, 21, 17, 28 }; String[] result = solution.solution(n, arr1, arr2); System.out.println(\u0026#34;결과 : \u0026#34; + Arrays.toString(result)); } public String[] solution(int n, int[] arr1, int[] arr2) { String[] answer = new String[n]; // 경로를 십진수를 이진수로 변경 및 이진수 앞 공백 추가  int count = n; for (int i = 0; i \u0026lt; count; i++) { String firstKeyMap = makeZero(Integer.toBinaryString(arr1[i]), count); String secondKeyMap = makeZero(Integer.toBinaryString(arr2[i]), count); String rowKey = \u0026#34;\u0026#34;; // System.out.println(firstKeyMap);  for (int j = 0; j \u0026lt; count; j++) { if ((firstKeyMap.charAt(j) == \u0026#39;0\u0026#39;) \u0026amp;\u0026amp; (secondKeyMap.charAt(j) == \u0026#39;0\u0026#39;)) { rowKey += \u0026#34; \u0026#34;; } else { rowKey += \u0026#34;#\u0026#34;; } } // System.out.println(rowKey);  answer[i] = rowKey; } return answer; } private String makeZero(String binaryString, int length) { int binaryLength = binaryString.length(); while (binaryLength != length) { binaryString = \u0026#34;0\u0026#34; + binaryString; binaryLength++; } return binaryString; } } ","permalink":"https://haservi.github.io/posts/algorithms/programmers/level1/01-algo-secret-map/","summary":"비밀지도 문제 설명 네오는 평소 프로도가 비상금을 숨겨놓는 장소를 알려줄 비밀지도를 손에 넣었다.\n그런데 이 비밀지도는 숫자로 암호화되어 있어 위치를 확인하기 위해서는 암호를 해독해야 한다.\n다행히 지도 암호를 해독할 방법을 적어놓은 메모도 함께 발견했다.\n 지도는 한 변의 길이가 n인 정사각형 배열 형태로, 각 칸은 \u0026ldquo;공백\u0026rdquo;(\u0026quot; \u0026ldquo;) 또는 \u0026ldquo;벽\u0026rdquo;(\u0026quot;#\u0026quot;) 두 종류로 이루어져 있다. 전체 지도는 두 장의 지도를 겹쳐서 얻을 수 있다. 각각 \u0026ldquo;지도 1\u0026quot;과 \u0026ldquo;지도 2\u0026quot;라고 하자.\n지도 1 또는 지도 2 중 어느 하나라도 벽인 부분은 전체 지도에서도 벽이다.","title":"비밀지도"},{"content":"개인 공부 목적으로 블로그를 시작하려 한다.\n강의 또는 서적, 알고리즘을 통해 공부한 내용 및 개발 도중 삽질 관련 경험을 기억하고 공유하기 위한 블로그이다.\n","permalink":"https://haservi.github.io/posts/etc/start-blog/","summary":"개인 공부 목적으로 블로그를 시작하려 한다.\n강의 또는 서적, 알고리즘을 통해 공부한 내용 및 개발 도중 삽질 관련 경험을 기억하고 공유하기 위한 블로그이다.","title":"블로그 시작하기"}]