<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Spring on Halog</title>
    <link>https://haservi.github.io/categories/spring/</link>
    <description>Recent content in Spring on Halog</description>
    <image>
      <url>https://haservi.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://haservi.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 22 Dec 2021 20:11:56 +0900</lastBuildDate><atom:link href="https://haservi.github.io/categories/spring/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[Spring] Service와 ServiceImpl에 대해</title>
      <link>https://haservi.github.io/posts/spring/service-and-serviceimp/</link>
      <pubDate>Wed, 22 Dec 2021 20:11:56 +0900</pubDate>
      
      <guid>https://haservi.github.io/posts/spring/service-and-serviceimp/</guid>
      <description>Service, ServiceImpl Spring 프로젝트를 하면 종종 관례적으로 Service를 interface로 기능 명세를 한 뒤 ServiceImpl에 기능을 구현하게 되는 Factory Pattern을 사용하게 됩니다.
interface는 기능을 추상화하여 클래스간 결합도를 낮추어 주고, 협업 시 업무분담도 용이합니다.
게임으로 예를 들면 스타크래프트에서 모든 유닛의 기본적인 특성 HP, 이동하기를 interface로 기능만 명시하고 각각 분업하여 유닛에 대한 HP나 이동속도를 구현할 수 있습니다.
하지만 일반적인 Spring 웹프로젝트에서는 Service interface는 1:1 구조인 경우가 많습니다. 만약 확장성을 고려한 1:N의 경우에는 interface로 가는 것이 좋지만 너무 막연한 경우에는 그냥 class로 생성 후 추후 시나리오 변경 또는 로직상 확장성이 필요한 경우 interface로 변경하는 것이 좋다고 생각합니다.</description>
    </item>
    
    <item>
      <title>springtoolsuite4에서 dependency 추가 방법</title>
      <link>https://haservi.github.io/posts/spring/springboot-add-dependency/</link>
      <pubDate>Thu, 02 Dec 2021 16:40:29 +0900</pubDate>
      
      <guid>https://haservi.github.io/posts/spring/springboot-add-dependency/</guid>
      <description>SpringBoot에서 Spring Starter Project로 프로젝트를 처음 만든 후 dependency를 추가하고 싶은 경우 해당 프로젝트 우클릭 후 Spring목록의 Add Starters에서 추가하거나 maven repository링크에서 추가해 줘야 합니다.

maven repository 사이트에서 하나하나 찾아서 넣기 번거로운 경우 쉽게 추가할 수 있습니다.
아마도 인텔리j의 ultimate의 경우에도 위와 비슷한 방법으로 dependency를 추가할 수 있을 것이라 생각되네요.</description>
    </item>
    
  </channel>
</rss>
