<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Halog</title>
    <link>https://haservi.github.io/</link>
    <description>Recent content on Halog</description>
    <image>
      <url>https://haservi.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://haservi.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 02 Jun 2022 20:20:49 +0900</lastBuildDate><atom:link href="https://haservi.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>DBeaver 커스텀 셋팅하기</title>
      <link>https://haservi.github.io/posts/tools/how-to-dbeaver/</link>
      <pubDate>Thu, 02 Jun 2022 20:20:49 +0900</pubDate>
      
      <guid>https://haservi.github.io/posts/tools/how-to-dbeaver/</guid>
      <description>주로 DB를 관리하는 툴로 HeidiSQL를 많이 사용했습니다.
Spring Data JPA와 QueryDSL 조합을 이용한 뒤로 어느 정도 익숙해지고 나서는 쿼리를 짜는 일이 많이 없지만, 조금 복잡한 쿼리의 경우는 쿼리를 작성해보고 성능 체크 후 QueryDSL로 변환하여 작업합니다.
하지만 Mac환경에서는 HeidiSQL이 Mac을 지원하지 않기 때문에 다른 DB 툴을 사용해야 합니다.
Mac을 지원하는 다양한 DB툴 중에 평가가 꽤 괜찮은 DBeaver링크에 대해 알아보겠습니다.
Dbeaver 란?  DBeaver는 Windows와 Mac 모두 지원 거의 모든 Database를 지원(MySQL, PostgreSQL, MariaDB, SQLite, Oracle, DB2, SQL Server&amp;hellip;) 오픈 소스 기반으로 다양한 확장 플러그인 지원 Entity Diagarm 지원 DB 내보내기 불러오기 지원  Community 버전을 이용해도 위와 같은 기능을 모두 사용할 수 있습니다.</description>
    </item>
    
    <item>
      <title>윈도우 Port 강제 종료 방법</title>
      <link>https://haservi.github.io/posts/tips/window-port-taskkill/</link>
      <pubDate>Mon, 23 May 2022 21:49:41 +0900</pubDate>
      
      <guid>https://haservi.github.io/posts/tips/window-port-taskkill/</guid>
      <description>종종 테스트 중 이전에 실행한 Port가 남아서 충돌나는 경우가 있습니다.
기존에 존재하는 Port의 PID를 제거하면 삭제할 수 있습니다.
Port 강제 종료 방법  먼저 windows + R 을 눌러 실행 스크립트를 열어주고 cmd를 입력하여 커맨드 창을 열어줍니다. 명령어로 netstat -a -o를 입력하면 현재 연결된 네트워크 상태를 볼 수 있습니다.  위와 같이 8080포트가 존재하면 우측에 있는 PID의 번호를 기억합니다. 여기서는 49480의 값입니다. taskkill /f /pid 49480을 입력하면 해당 8080포트를 제거할 수 있습니다.</description>
    </item>
    
    <item>
      <title>비쥬얼 스튜디오 코드에서 자동완성 해제하기</title>
      <link>https://haservi.github.io/posts/tips/visual-studio-code-auto-complete/</link>
      <pubDate>Sun, 03 Apr 2022 14:30:00 +0900</pubDate>
      
      <guid>https://haservi.github.io/posts/tips/visual-studio-code-auto-complete/</guid>
      <description>Visual Studio Code의 자동완성 기능 해제 방법 프로그램 실행 후 설정(Ctrl + , 또는 Command + ,)으로 들어간 후 검색항목에 intelliSense를 검색하면 여러 체크박스 리스트를 볼 수 있습니다.
위(Show Classes)에서부터 아래(Show Words)까지 전부 체크 해제를 하면 자동완성 기능이 비활성화 됩니다.
그렇지만 너무 많은 옵션이 있기 때문에 전부 클릭 해제하기가 귀찮은 경우 아래의 JSON으로 추가할 수 있습니다.
오른쪽 위의 설정으로 들어가서 아래의 값들을 복사 후 붙여 넣어주면 됩니다.
&amp;#34;explorer.compactFolders&amp;#34;: false, &amp;#34;explorer.confirmDragAndDrop&amp;#34;: false, &amp;#34;editor.</description>
    </item>
    
    <item>
      <title>Git Commit 메시지 규칙</title>
      <link>https://haservi.github.io/posts/tips/git-commit-message-rule/</link>
      <pubDate>Tue, 01 Mar 2022 22:54:30 +0900</pubDate>
      
      <guid>https://haservi.github.io/posts/tips/git-commit-message-rule/</guid>
      <description>Git Commit git commit message convetion은 회사 또는 프로젝트 마다 다를 수 있습니다.
message의 형태는 다를 수 있지만 기본적인 목적은 같습니다.
잘 만들어진 git 커밋 메시지는 해당 프로젝트에서 작업하는 팀원과 미래의 자신에게 변경 사항에 대한 의미를 전달하기 위한 좋은 방법입니다.
일반적으로 커밋 메시지는 다음과 같은 구조를 권장합니다.
type: Subject body footer 보통 위와 같은 형태입니다.
제목은 새로운 기능 추가인 경우 feat: Subject, Feat: Subject, Feat Subject, Feature Subject 등 조금씩 type의 형태가 다르지만 그건 프로젝트에 따라 일관되게 맞추면 됩니다.</description>
    </item>
    
    <item>
      <title>git CRLF 개행 문자 차이 해결 방법</title>
      <link>https://haservi.github.io/posts/tips/git-crlf/</link>
      <pubDate>Mon, 21 Feb 2022 21:50:28 +0900</pubDate>
      
      <guid>https://haservi.github.io/posts/tips/git-crlf/</guid>
      <description>Windows는 line ending으로 CR(Carriage-Return, \r)과 LF(Line Feed \n)을 사용합니다. CRLF는 커서를 다음 라인의 맨앞으로 옮기는 표시이며, ↲ 이러한 표현입니다.
Mac, Linux(Unix 계열)의 경우 LF(Line Feed \n)를 사용합니다. LF는 현재 위치에서 바로 아래로 이동하는 것을 의미하며, ↓ 와 같은 표현입니다.
문제는 같은 작업 영역에서 같은 코드를 수정할 경우 windows와 mac의 코드가 일치하더라도 커서의 표현값이 다르기 때문에 충돌이 일어나는 경우가 발생합니다.
해결 방법으로는 각 운영체제별로 git을 기준으로 LF로 맞춰주는 것입니다.
Windows는 CRLF를 LF로 변경되도록 git config 설정 중 core.</description>
    </item>
    
    <item>
      <title>Java Priority Queue(우선순위 큐) 원리 및 사용 방법</title>
      <link>https://haservi.github.io/posts/java/priority-queue/</link>
      <pubDate>Mon, 14 Feb 2022 20:20:41 +0900</pubDate>
      
      <guid>https://haservi.github.io/posts/java/priority-queue/</guid>
      <description>우선순위 큐(Priority Queue) 란? 우선순위 큐(Priority Queue)는 일반적인 큐의 구조와 달리 들어가는 순서와 상관없이 정의한대로 우선순위를 먼저 결정하고 그 우선순위가 높은 데이터가 먼저 나가는 자료구조 입니다. 그렇기 때문에 dequeue를 하면 이미 정의한 순서에 맞게 가장 위의 값이 나타납니다.
우선순위 큐는 힙을 기반으로 하는 완전이진트리로 우선순위를 정하게 됩니다.
사용 방법 우선순위 큐는 우선순위가 꼭 필요한 경우에 사용합니다. 람다식으로 정의해도 되고 Comparable을 이용해서 정의해도 됩니다.
// 낮은 숫자가 우선순위가 높은 방식 PriorityQueue&amp;lt;Integer&amp;gt; pq = new PriorityQueue&amp;lt;&amp;gt;(); // 높은 숫자가 우선순위가 높은 방식 PriorityQueue&amp;lt;Integer&amp;gt; pq = new PriorityQueue&amp;lt;&amp;gt;(Collections.</description>
    </item>
    
    <item>
      <title>H2 2.1.210 Upgrade시 JPA 테스트 에러 해결 방법</title>
      <link>https://haservi.github.io/posts/spring/spadework/h2-version-upgrade-error/</link>
      <pubDate>Sat, 29 Jan 2022 19:16:48 +0900</pubDate>
      
      <guid>https://haservi.github.io/posts/spring/spadework/h2-version-upgrade-error/</guid>
      <description>H2를 최신 버전(2.1.210)으로 업데이트하니 아래와 같은 에러가 발생했습니다.
Caused by: org.hibernate.HibernateException: Access to DialectResolutionInfo cannot be null when &amp;#39;hibernate.dialect&amp;#39; not set ... java.lang.IllegalStateException: Failed to load ApplicationContext at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:132) at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124) at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:190) ... 일단 임시방편으로 H2 url을 연결하는 곳에 추가적으로 옵션(;MODE=LEGACY)을 넣으면 해결됩니다.
url: jdbc:h2:tcp://localhost/~/test;MODE=LEGACY MODE=LEGACY를 모드를 사용하면 H2 1.X용으로 작성된 응용 프로그램에 대한 일부 호환성 기능이 활성화됩니다. Hibernate ORM에서 H2에 대해서 유효하지 않은 SQL을 생성하기 때문이라고 합니다.
그렇다면.. hibernate ORM에서 H2 방언에 대한 문제를 해결해야 합니다.</description>
    </item>
    
    <item>
      <title>Spring Data JPA와 JPQL 함께 사용하기</title>
      <link>https://haservi.github.io/posts/spring/springdatajpa-and-customquery/</link>
      <pubDate>Mon, 17 Jan 2022 23:09:03 +0900</pubDate>
      
      <guid>https://haservi.github.io/posts/spring/springdatajpa-and-customquery/</guid>
      <description>JPQL 이란? 예전에는 JPQL은 Java Persistence Query Language로 불렸지만 현재의 JPQL은(Jakarta Persistence Query Language) 라고 합니다.(나무위키 링크)
2019년부터 JPA(Java Persistence API)또한 Jakarta Persistence로 변경됐습니다.
이름은 달라졌지만 역할은 달라지지 않았습니다. JPQL을 이용하여 관계형 데이터베이스의 엔티티를 정의하고 이를 활용한 쿼리 언어를 자바를 이용하여 구현합니다.
더 나아가 Querydsl을 이용하면 좀 더 직관적이고 오류 없이 자바를 이용하여 작성할 수 있습니다.
간단한 예시로 회원 조회를 하는 경우 JPQL과 Querydsl의 차이는 아래와 같습니다.
JPQL
public List&amp;lt;Member&amp;gt; findAll() { EntityManager entityManager; return entityManager.</description>
    </item>
    
    <item>
      <title>Mybatis와 JPA에 대하여</title>
      <link>https://haservi.github.io/posts/spring/mybatis-and-jpa/</link>
      <pubDate>Sat, 15 Jan 2022 17:24:58 +0900</pubDate>
      
      <guid>https://haservi.github.io/posts/spring/mybatis-and-jpa/</guid>
      <description>Mybatis란? 자바의 관계형 데이터베이스 프로그래밍을 좀 더 쉽게 할 수 있게 도와 주는 개발 프레임 워크입니다.
JDBC를 통해 데이터베이스에 엑세스하는 작업을 캡슐화하고 일반 SQL 쿼리, 저장 프로시저 및 고급 매핑을 지원하며 모든 JDBC 코드 및 매개 변수의 중복작업을 제거 합니다.
또한 Java코드와 SQL코드를 분리하여 서로 다른 역할에 집중할 수 있게 합니다.
MyBatis는 DAO(Data Access Object)인터페이스를 통해 SQL과 연결 후 VO(Value Object) 또는 DTO(Data Transfer Object)로 바로 데이터를 가져옵니다.
JPA란? JPA(Java Persistence API)는 ORM(Object-Relational Mapping) 기술 표준으로 JPA가 제공하는 API를 사용하면 직접적으로 SQL을 사용하지 않고도 DB에 접근이 가능합니다.</description>
    </item>
    
    <item>
      <title>@Autowired와 @RequiredArgsConstructor 차이점 </title>
      <link>https://haservi.github.io/posts/spring/diff-requiredargsconstructor-autowired/</link>
      <pubDate>Wed, 12 Jan 2022 13:39:01 +0900</pubDate>
      
      <guid>https://haservi.github.io/posts/spring/diff-requiredargsconstructor-autowired/</guid>
      <description>@Autowired는 필드 주입이고, @RequiredArgsConstructor는 생성자 주입(Constructor Injection) 입니다.
@RequiredArgsConstructor는 Lombok에서 제공하는 어노테이션 입니다.
결론적으로 생성자 주입을 권장합니다. 인텔리제이에서 코드를 작성하다보면 @Autowired를 사용하면 아래와 같은 경고를 알려줍니다.
.notice{--root-color: #000; --root-background: #e7f2fa; --title-color: #fff; --title-background: #6ab0de; --warning-title: rgba(217, 83, 79, 0.9); --warning-content: #fae2e2; --info-title: #f0b37e; --info-content: #fff2db; --note-title: #6ab0de; --note-content: #e7f2fa; --tip-title: rgba(92, 184, 92, 0.8); --tip-content: #e6f9e6;}body.dark .notice{--root-color: #fff; --root-background: #e7f2fa; --title-color: #fff; --title-background: #6ab0de; --warning-title: rgba(130, 49, 47, 0.9); --warning-content: #341312; --info-title: #906B4B; --info-content: #392A1E; --note-title: #3f6985; --note-content: #192A35; --tip-title: rgba(46, 92, 46, 0.</description>
    </item>
    
    <item>
      <title>Logitech Options를 이용한 마우스 커스텀하기</title>
      <link>https://haservi.github.io/posts/tools/how-to-logitech-option/</link>
      <pubDate>Sat, 08 Jan 2022 19:40:22 +0900</pubDate>
      
      <guid>https://haservi.github.io/posts/tools/how-to-logitech-option/</guid>
      <description>logitech options 란? 일부 로지텍 마우스 중에는 특정 소프트웨어를 지원하는 기능이 있습니다.
그 중 logitech options는 Flow기능으로 기기간 파일전송이나 하나의 마우스로 여러대의 기기를 제어할 수 있습니다.
이번에 소개해드릴 기능은 Flow기능이 아닌 마우스 제스처 모드에 따른 설정입니다.
설치 해당 사이트에서 OS에 맞는 프로그램을 설치하면 됩니다.
설치 후 정상적으로 마우스가 연결되면 아래와 비슷한 사진이 보입니다.
커스텀 설정하기 프로그램 실행 후 흰색 동그라미가 있는 모든 버튼이 커스텀 가능합니다.
저의 경우 뒤로가기와 앞으로가기 버튼만 커스텀하여 사용하고 있습니다.</description>
    </item>
    
    <item>
      <title>자주 사용하는 Git Command 정리</title>
      <link>https://haservi.github.io/posts/tips/git-frequently-used-commands/</link>
      <pubDate>Wed, 29 Dec 2021 22:18:20 +0900</pubDate>
      
      <guid>https://haservi.github.io/posts/tips/git-frequently-used-commands/</guid>
      <description>Git Command를 사용하면서 자주 사용하는 명령어를 정리했습니다.
이외에도 수많은 명령어가 존재하지만 작업과 관련된 명령어는 아래의 경우로 충분하다고 생각합니다.
해당 명령어 이외에 더 참고하고 싶다면 https://git-scm.com/book/ko/v2 해당 사이트에서 무료로 책을 다운로드 받아서 볼 수 있습니다.
또한, 요즘은 소스트리(https://www.sourcetreeapp.com/)에서 GUI로 편하게 작업할 수 도 있습니다.
기본적인 명령어는 숙지하는 것이 좋지만 history나 간단한 업무용으로는 충분하다고 생각합니다.
기본 명령어   git 설정 보기
git config --list   사용자 이름 입력
git config --global user.</description>
    </item>
    
    <item>
      <title>[Spring] Service와 ServiceImpl에 대해</title>
      <link>https://haservi.github.io/posts/spring/service-and-serviceimp/</link>
      <pubDate>Wed, 22 Dec 2021 20:11:56 +0900</pubDate>
      
      <guid>https://haservi.github.io/posts/spring/service-and-serviceimp/</guid>
      <description>Service, ServiceImpl Spring 프로젝트를 하면 종종 관례적으로 Service를 interface로 기능 명세를 한 뒤 ServiceImpl에 기능을 구현하게 되는 Factory Pattern을 사용하게 됩니다.
interface는 기능을 추상화하여 클래스간 결합도를 낮추어 주고, 협업 시 업무분담도 용이합니다.
게임으로 예를 들면 스타크래프트에서 모든 유닛의 기본적인 특성 HP, 이동하기를 interface로 기능만 명시하고 각각 분업하여 유닛에 대한 HP나 이동속도를 구현할 수 있습니다.
하지만 일반적인 Spring 웹프로젝트에서는 Service interface는 1:1 구조인 경우가 많습니다. 만약 확장성을 고려한 1:N의 경우에는 interface로 가는 것이 좋지만 너무 막연한 경우에는 그냥 class로 생성 후 추후 시나리오 변경 또는 로직상 확장성이 필요한 경우 interface로 변경하는 것이 좋다고 생각합니다.</description>
    </item>
    
    <item>
      <title>springtoolsuite4에서 dependency 추가 방법</title>
      <link>https://haservi.github.io/posts/spring/springboot-add-dependency/</link>
      <pubDate>Thu, 02 Dec 2021 16:40:29 +0900</pubDate>
      
      <guid>https://haservi.github.io/posts/spring/springboot-add-dependency/</guid>
      <description>SpringBoot에서 Spring Starter Project로 프로젝트를 처음 만든 후 dependency를 추가하고 싶은 경우 해당 프로젝트 우클릭 후 Spring목록의 Add Starters에서 추가하거나 maven repository링크에서 추가해 줘야 합니다.
maven repository 사이트에서 하나하나 찾아서 넣기 번거로운 경우 쉽게 추가할 수 있습니다.
아마도 인텔리j의 ultimate의 경우에도 위와 비슷한 방법으로 dependency를 추가할 수 있을 것이라 생각되네요.</description>
    </item>
    
    <item>
      <title>Github 저장소 안의 폴더 다운로드 받는 방법</title>
      <link>https://haservi.github.io/posts/tips/git-inner-folder-download/</link>
      <pubDate>Sun, 28 Nov 2021 21:30:06 +0900</pubDate>
      
      <guid>https://haservi.github.io/posts/tips/git-inner-folder-download/</guid>
      <description>기본적으로 웹상에서는 Git 저장소 안의 폴더를 다운받으려면 해당 저장소 전부를 다운 받은 후에 특정 폴더의 정보를 봐야 합니다.
간단한 방법은 아래의 링크에서 다운로드 받는게 제일 쉬운방법이지만 터미널에서 다운로드 방법도 한번 다루어보겠습니다. 터미널로 다운 받은 경우 이후 해당 소스가 변경이 있다면 당겨올 수 있는 이점도 있습니다.
해결방법 웹 다운로드 https://downgit.github.io/#/home 해당 사이트에 github 저장소 특정 폴더의 링크를 복사 한 후 붙여넣고 Download 버튼 클릭
터미널 다운로드 기본적으로 git이 설치돼 있어야합니다.
예제로 https://github.</description>
    </item>
    
    <item>
      <title>화면 캡쳐 프로그램 추천</title>
      <link>https://haservi.github.io/posts/tools/how-to-capture/</link>
      <pubDate>Thu, 25 Nov 2021 21:38:17 +0900</pubDate>
      
      <guid>https://haservi.github.io/posts/tools/how-to-capture/</guid>
      <description>작업의 효율을 높이기 위해 기존 화면에서 필요한 정보를 잠시 동안 캡쳐하는 방법이 있습니다.
캡쳐프로그램은 정말 다양하게 존재하는데요. 예를 들어 알캡쳐, picpic, 윈도우 기본 내장 캡쳐, pureRef, snipaste 등 많이 있습니다.
저 같은 경우 포스팅 할 때 화면캡쳐 용도로는 picpick을 자주 이용하며, 업무 중 필요한 정보를 캡쳐 할 때는 snipaste를 사용합니다.
picpick의 경우는 워낙 잘 알려져 있기 때문에 snipaste에 대해 알아보겠습니다.
Snipaste (download link) Snipaste는 특정 화면을 지정하여 캡쳐하여 화면에 띄워놓을 수 있습니다.</description>
    </item>
    
    <item>
      <title>윈도우 WSL2 Ubuntu 터미널 꾸미기</title>
      <link>https://haservi.github.io/posts/linux/used-zsh-powerline10/</link>
      <pubDate>Mon, 22 Nov 2021 20:49:25 +0900</pubDate>
      
      <guid>https://haservi.github.io/posts/linux/used-zsh-powerline10/</guid>
      <description>Windows WSL Ubuntu 커스텀 하기 Window에서는 WSL(Windows Subsystem for Linux)를 제공합니다.
예전엔 가상환경(VM)에 리눅스를 올렸다면 지금은 손쉽게 리눅스 커널을 WSL로 접근할 수 있게 됐습니다.
그렇기 때문에 웹개발을 한다면 Window에서 개발하여 WSL에 배포 테스트를 손쉽게? 할 수 있는 환경을 구축 할 수 있습니다. 예를 들어 웹의 경우 Backend, Frontend, DB 같은 환경을 Docker로 설정하여 WSL에 올린 뒤 바로 배포가 성공했다면 이러한 설정을 그대로 AWS나 Azure에 적용할 수 있습니다.
해당 글은 단지 커스텀에 대한 이야기이지만 추후 위와 같은 방법으로 배포테스트도 한 번 다뤄볼 생각입니다.</description>
    </item>
    
    <item>
      <title>JPA ddl-auto 설정과 더미데이터 생성 방법</title>
      <link>https://haservi.github.io/posts/spring/hibernate-ddl-auto/</link>
      <pubDate>Fri, 12 Nov 2021 15:47:31 +0900</pubDate>
      
      <guid>https://haservi.github.io/posts/spring/hibernate-ddl-auto/</guid>
      <description>ddl-auto 란 JPA에서는 기본적으로 Entity에 테이블을 매핑하면 쿼리를 사용하지 않고 값을 가져올 수 있습니다.
설정 옵션으로
jpa: hibernate: ddl-auto: create #create-drop, update, validate, none 각각의 옵션을 봐보면 아래와 같습니다.
 create : SessionFactory 시작시 스키마를 삭제하고 다시 생성 create-drop : SessionFactory 종료 시 스키마를 삭제 update : SessionFactory 연결된 DB와 비교하여 추가된 항목은 추가 만약 같은 변수명이면 오류발생 validate : SessionFactory 시작시 객체구성과 스키마가 다르다면 예외 발생 none: 아무것도 안함  실제 서비스 배포시에는 create, create-drop, update 와 같은 옵션을 사용하면 안되지만 개발 초기 테스트시에는 유용하게 사용할 수 있습니다.</description>
    </item>
    
    <item>
      <title>영상을 gif로 만드는 방법</title>
      <link>https://haservi.github.io/posts/tools/how-to-create-gif/</link>
      <pubDate>Sun, 07 Nov 2021 23:57:42 +0900</pubDate>
      
      <guid>https://haservi.github.io/posts/tools/how-to-create-gif/</guid>
      <description>간단하게 무거운 프로그램을 이용하지 않고 영상을 gif로 만드는 방법입니다.
 윈도우 - https://www.screentogif.com/ Mac - https://apps.apple.com/us/app/giphy-capture-the-gif-maker/id668208984?mt=12  위 프로그램을 다운로드 받아서 설치하면 됩니다.
설치 방법(Window)  https://www.screentogif.com/ 사이트에 접속하셔서 다운로드 합니다. 다운로드 후 설치 합니다. 설치가 완료되면 실행합니다.
 위와 같은 화면에서 선택 영역을 지정(예시: 메모장)하고 녹화를 누르면 아래와 같이 나타납니다.
 여기서 그냥 녹화를 누른뒤 진행하면 됩니다. 녹화를 마치고 정지를 누르시면 아래와 같은 화면이 나타납니다.
 저 같은 경우 초당 30프레임으로 설정하여서 5초짜리 영상에 대략 150프레임의 스크린샷이 찍혔습니다.</description>
    </item>
    
    <item>
      <title>[프로그래머스]조이스틱</title>
      <link>https://haservi.github.io/posts/algorithms/programmers/level2/03-joystick/</link>
      <pubDate>Sun, 24 Oct 2021 22:41:45 +0900</pubDate>
      
      <guid>https://haservi.github.io/posts/algorithms/programmers/level2/03-joystick/</guid>
      <description>조이스틱 문제 설명 조이스틱으로 알파벳 이름을 완성하세요. 맨 처음엔 A로만 이루어져 있습니다.
ex) 완성해야 하는 이름이 세 글자면 AAA, 네 글자면 AAAA
조이스틱을 각 방향으로 움직이면 아래와 같습니다.
▲ - 다음 알파벳 ▼ - 이전 알파벳 (A에서 아래쪽으로 이동하면 Z로) ◀ - 커서를 왼쪽으로 이동 (첫 번째 위치에서 왼쪽으로 이동하면 마지막 문자에 커서) ▶ - 커서를 오른쪽으로 이동 예를 들어 아래의 방법으로 &amp;ldquo;JAZ&amp;quot;를 만들 수 있습니다.
- 첫 번째 위치에서 조이스틱을 위로 9번 조작하여 J를 완성합니다.</description>
    </item>
    
    <item>
      <title>[프로그래머스]다리를 지나는 트럭</title>
      <link>https://haservi.github.io/posts/algorithms/programmers/level2/02-truck-crossing-the-bridge/</link>
      <pubDate>Mon, 27 Sep 2021 15:17:54 +0900</pubDate>
      
      <guid>https://haservi.github.io/posts/algorithms/programmers/level2/02-truck-crossing-the-bridge/</guid>
      <description>다리를 지나는 트럭 문제 설명 트럭 여러 대가 강을 가로지르는 일차선 다리를 정해진 순으로 건너려 합니다.
모든 트럭이 다리를 건너려면 최소 몇 초가 걸리는지 알아내야 합니다.
다리에는 트럭이 최대 bridge_length대 올라갈 수 있으며, 다리는 weight 이하까지의 무게를 견딜 수 있습니다.
단, 다리에 완전히 오르지 않은 트럭의 무게는 무시합니다.
예를 들어, 트럭 2대가 올라갈 수 있고 무게를 10kg까지 견디는 다리가 있습니다. 무게가 [7, 4, 5, 6]kg인 트럭이 순서대로 최단 시간 안에 다리를 건너려면 다음과 같이 건너야 합니다.</description>
    </item>
    
    <item>
      <title>[프로그래머스]위장</title>
      <link>https://haservi.github.io/posts/algorithms/programmers/level2/01-camouflage/</link>
      <pubDate>Wed, 15 Sep 2021 00:28:00 +0900</pubDate>
      
      <guid>https://haservi.github.io/posts/algorithms/programmers/level2/01-camouflage/</guid>
      <description>위장 문제 설명 스파이들은 매일 다른 옷을 조합하여 입어 자신을 위장합니다.
예를 들어 스파이가 가진 옷이 아래와 같고 오늘 스파이가 동그란 안경, 긴 코트, 파란색 티셔츠를 입었다면 다음날은 청바지를 추가로 입거나 동그란 안경 대신 검정 선글라스를 착용하거나 해야 합니다.
   종류 이름     얼굴 동그란 안경, 검정 선글라스   상의 파란색 티셔츠   하의 청바지   겉옷 긴 코트    스파이가 가진 의상들이 담긴 2차원 배열 clothes가 주어질 때 서로 다른 옷의 조합의 수를 return 하도록 solution 함수를 작성해주세요.</description>
    </item>
    
    <item>
      <title>[프로그래머스]하샤드 수</title>
      <link>https://haservi.github.io/posts/algorithms/programmers/level1/04-algo-hasshadsu/</link>
      <pubDate>Tue, 07 Sep 2021 11:55:29 +0900</pubDate>
      
      <guid>https://haservi.github.io/posts/algorithms/programmers/level1/04-algo-hasshadsu/</guid>
      <description>하샤드 수 문제 설명 양의 정수 x가 하샤드 수이려면 x의 자릿수의 합으로 x가 나누어져야 합니다.
예를 들어 18의 자릿수 합은 1+8=9이고, 18은 9로 나누어 떨어지므로 18은 하샤드 수입니다.
자연수 x를 입력받아 x가 하샤드 수인지 아닌지 검사하는 함수, solution을 완성해주세요.
제한 조건  x는 1 이상, 10000 이하인 정수입니다.  입출력 예    arr return     10 true   12 true   11 false   13 false    입출력 예 설명 입출력 예 #1</description>
    </item>
    
    <item>
      <title>[프로그래머스]콜라츠 추측</title>
      <link>https://haservi.github.io/posts/algorithms/programmers/level1/03-algo-colatz-guess/</link>
      <pubDate>Mon, 06 Sep 2021 21:01:13 +0900</pubDate>
      
      <guid>https://haservi.github.io/posts/algorithms/programmers/level1/03-algo-colatz-guess/</guid>
      <description>콜라츠 추측 문제 설명 1937년 Collatz란 사람에 의해 제기된 이 추측은, 주어진 수가 1이 될때까지 다음 작업을 반복하면, 모든 수를 1로 만들 수 있다는 추측입니다. 작업은 다음과 같습니다.
1-1. 입력된 수가 짝수라면 2로 나눕니다. 1-2. 입력된 수가 홀수라면 3을 곱하고 1을 더합니다. 2. 결과로 나온 수에 같은 작업을 1이 될 때까지 반복합니다. 예를 들어, 입력된 수가 6이라면 6→3→10→5→16→8→4→2→1 이 되어 총 8번 만에 1이 됩니다.
위 작업을 몇 번이나 반복해야하는지 반환하는 함수, solution을 완성해 주세요.</description>
    </item>
    
    <item>
      <title>[프로그래머스]직업군 추천하기</title>
      <link>https://haservi.github.io/posts/algorithms/programmers/level1/02-algo-recommend-job/</link>
      <pubDate>Thu, 26 Aug 2021 20:53:37 +0900</pubDate>
      
      <guid>https://haservi.github.io/posts/algorithms/programmers/level1/02-algo-recommend-job/</guid>
      <description>직업군 추천하기 문제 설명 개발자가 사용하는 언어와 언어 선호도를 입력하면 그에 맞는 직업군을 추천해주는 알고리즘을 개발하려고 합니다.
아래 표는 5개 직업군 별로 많이 사용하는 5개 언어에 직업군 언어 점수를 부여한 표입니다.
   점수 SI CONTENTS HARDWARE PORTAL GAME     5 JAVA JAVASCRIPT C JAVA C++   4 JAVASCRIPT JAVA C++ JAVASCRIPT C#   3 SQL PYTHON PYTHON PYTHON JAVASCRIPT   2 PYTHON SQL JAVA KOTLIN C   1 C# C++ JAVASCRIPT PHP JAVA    예를 들면, SQL의 SI 직업군 언어 점수는 3점이지만 CONTENTS 직업군 언어 점수는 2점입니다.</description>
    </item>
    
    <item>
      <title>[프로그래머스]비밀지도</title>
      <link>https://haservi.github.io/posts/algorithms/programmers/level1/01-algo-secret-map/</link>
      <pubDate>Fri, 20 Aug 2021 01:31:31 +0900</pubDate>
      
      <guid>https://haservi.github.io/posts/algorithms/programmers/level1/01-algo-secret-map/</guid>
      <description>비밀지도 문제 설명 네오는 평소 프로도가 비상금을 숨겨놓는 장소를 알려줄 비밀지도를 손에 넣었다.
그런데 이 비밀지도는 숫자로 암호화되어 있어 위치를 확인하기 위해서는 암호를 해독해야 한다.
다행히 지도 암호를 해독할 방법을 적어놓은 메모도 함께 발견했다.
 지도는 한 변의 길이가 n인 정사각형 배열 형태로, 각 칸은 &amp;ldquo;공백&amp;rdquo;(&amp;quot; &amp;ldquo;) 또는 &amp;ldquo;벽&amp;rdquo;(&amp;quot;#&amp;quot;) 두 종류로 이루어져 있다. 전체 지도는 두 장의 지도를 겹쳐서 얻을 수 있다. 각각 &amp;ldquo;지도 1&amp;quot;과 &amp;ldquo;지도 2&amp;quot;라고 하자.
지도 1 또는 지도 2 중 어느 하나라도 벽인 부분은 전체 지도에서도 벽이다.</description>
    </item>
    
    <item>
      <title>블로그 시작하기</title>
      <link>https://haservi.github.io/posts/etc/start-blog/</link>
      <pubDate>Tue, 17 Aug 2021 21:00:00 +0900</pubDate>
      
      <guid>https://haservi.github.io/posts/etc/start-blog/</guid>
      <description>블로그 시작하기 최근 기억하는 것보다 잊혀져가는 것이 많아져 공부한 내용을 기록하기 위해 블로그를 다시 써보려 합니다.
이전에 티스토리에서 블로그를 했었는데 뭐랄까.. github에서 하는게 좀 더 관리하기가 편할 것 같아 이사하게 됐습니다. :D
주로 공부한 내용 또는 삽질 그리고 개발하면서 도움되는 팁에 대한 내용이 주를 이룰 것이라 생각합니다.
테마 선정 gihtub.io 안에서도 Gatsby, Jekyll, Hexo, Hugo와 같은 여러 테마가 있으며 이 중 Hugo를 사용하고 있습니다.
해당 블로그 테마는 PaperMod를 기본으로 하였으며, 조금 커스텀하여 사용중입니다.</description>
    </item>
    
    
    <item>
      <title>Projects</title>
      <link>https://haservi.github.io/projects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://haservi.github.io/projects/</guid>
      <description>projects</description>
    </item>
    
    
  </channel>
</rss>
