<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Halog</title>
    <link>https://haservi.github.io/posts/</link>
    <description>Recent content in Posts on Halog</description>
    <image>
      <url>https://haservi.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://haservi.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 29 Dec 2021 22:18:20 +0900</lastBuildDate><atom:link href="https://haservi.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>자주 사요하는 Git Command 정리</title>
      <link>https://haservi.github.io/posts/tips/git-frequently-used-commands/</link>
      <pubDate>Wed, 29 Dec 2021 22:18:20 +0900</pubDate>
      
      <guid>https://haservi.github.io/posts/tips/git-frequently-used-commands/</guid>
      <description>Git Command를 사용하면서 자주 사용하는 명령어를 정리했습니다.
이외에도 수많은 명령어가 존재하지만 작업과 관련된 명령어는 아래의 경우로 충분하다고 생각합니다.
해당 명령어 이외에 더 참고하고 싶다면 https://git-scm.com/book/ko/v2 해당 사이트에서 무료로 책을 다운로드 받아서 볼 수 있습니다.
또한, 요즘은 소스트리(https://www.sourcetreeapp.com/)에서 GUI로 편하게 작업할 수 도 있습니다.
기본적인 명령어는 숙지하는 것이 좋지만 history나 간단한 업무용으로는 충분하다고 생각합니다.
기본 명령어   git 설정 보기
git config --list   사용자 이름 입력
git config --global user.</description>
    </item>
    
    <item>
      <title>[Spring] Service와 ServiceImpl에 대해</title>
      <link>https://haservi.github.io/posts/spring/service-and-serviceimp/</link>
      <pubDate>Wed, 22 Dec 2021 20:11:56 +0900</pubDate>
      
      <guid>https://haservi.github.io/posts/spring/service-and-serviceimp/</guid>
      <description>Service, ServiceImpl Spring 프로젝트를 하면 종종 관례적으로 Service를 interface로 기능 명세를 한 뒤 ServiceImpl에 기능을 구현하게 되는 Factory Pattern을 사용하게 됩니다.
interface는 기능을 추상화하여 클래스간 결합도를 낮추어 주고, 협업 시 업무분담도 용이합니다.
게임으로 예를 들면 스타크래프트에서 모든 유닛의 기본적인 특성 HP, 이동하기를 interface로 기능만 명시하고 각각 분업하여 유닛에 대한 HP나 이동속도를 구현할 수 있습니다.
하지만 일반적인 Spring 웹프로젝트에서는 Service interface는 1:1 구조인 경우가 많습니다. 만약 확장성을 고려한 1:N의 경우에는 interface로 가는 것이 좋지만 너무 막연한 경우에는 그냥 class로 생성 후 추후 시나리오 변경 또는 로직상 확장성이 필요한 경우 interface로 변경하는 것이 좋다고 생각합니다.</description>
    </item>
    
    <item>
      <title>springtoolsuite4에서 dependency 추가 방법</title>
      <link>https://haservi.github.io/posts/spring/springboot-add-dependency/</link>
      <pubDate>Thu, 02 Dec 2021 16:40:29 +0900</pubDate>
      
      <guid>https://haservi.github.io/posts/spring/springboot-add-dependency/</guid>
      <description>SpringBoot에서 Spring Starter Project로 프로젝트를 처음 만든 후 dependency를 추가하고 싶은 경우 해당 프로젝트 우클릭 후 Spring목록의 Add Starters에서 추가하거나 maven repository링크에서 추가해 줘야 합니다.

maven repository 사이트에서 하나하나 찾아서 넣기 번거로운 경우 쉽게 추가할 수 있습니다.
아마도 인텔리j의 ultimate의 경우에도 위와 비슷한 방법으로 dependency를 추가할 수 있을 것이라 생각되네요.</description>
    </item>
    
    <item>
      <title>Github 저장소 안의 폴더 다운로드 받는 방법</title>
      <link>https://haservi.github.io/posts/tips/git-inner-folder-download/</link>
      <pubDate>Sun, 28 Nov 2021 21:30:06 +0900</pubDate>
      
      <guid>https://haservi.github.io/posts/tips/git-inner-folder-download/</guid>
      <description>기본적으로 웹상에서는 Git 저장소 안의 폴더를 다운받으려면 해당 저장소 전부를 다운 받은 후에 특정 폴더의 정보를 봐야 합니다.
간단한 방법은 아래의 링크에서 다운로드 받는게 제일 쉬운방법이지만 터미널에서 다운로드 방법도 한번 다루어보겠습니다. 터미널로 다운 받은 경우 이후 해당 소스가 변경이 있다면 당겨올 수 있는 이점도 있습니다.
해결방법 웹 다운로드 https://downgit.github.io/#/home 해당 사이트에 github 저장소 특정 폴더의 링크를 복사 한 후 붙여넣고 Download 버튼 클릭
터미널 다운로드 기본적으로 git이 설치돼 있어야합니다.
예제로 https://github.</description>
    </item>
    
    <item>
      <title>화면 캡쳐 프로그램 추천</title>
      <link>https://haservi.github.io/posts/tools/how-to-capture/</link>
      <pubDate>Thu, 25 Nov 2021 21:38:17 +0900</pubDate>
      
      <guid>https://haservi.github.io/posts/tools/how-to-capture/</guid>
      <description>들어가며 작업의 효율을 높이기 위해 기존 화면에서 필요한 정보를 잠시 동안 캡쳐하는 방법이 있습니다.
캡쳐프로그램은 정말 다양하게 존재하는데요. 예를 들어 알캡쳐, picpic, 윈도우 기본 내장 캡쳐, pureRef, snipaste 등 많이 있습니다.
저 같은 경우 포스팅 할 때 화면캡쳐 용도로는 picpick을 자주 이용하며, 업무 중 필요한 정보를 캡쳐 할 때는 snipaste를 사용합니다.
(picpick)[https://picpick.app/ko/]의 경우는 워낙 잘 알려져 있기 때문에 snipaste에 대해 알아보겠습니다.
Snipaste (download link) Snipaste는 특정 화면을 지정하여 캡쳐하여 화면에 띄워놓을 수 있습니다.</description>
    </item>
    
    <item>
      <title>윈도우 WSL2 Ubuntu 터미널 꾸미기</title>
      <link>https://haservi.github.io/posts/linux/used-zsh-powerline10/</link>
      <pubDate>Mon, 22 Nov 2021 20:49:25 +0900</pubDate>
      
      <guid>https://haservi.github.io/posts/linux/used-zsh-powerline10/</guid>
      <description>Windows WSL Ubuntu 커스텀 하기 Window에서는 WSL(Windows Subsystem for Linux)를 제공합니다.
예전엔 가상환경(VM)에 리눅스를 올렸다면 지금은 손쉽게 리눅스 커널을 WSL로 접근할 수 있게 됐습니다.
그렇기 때문에 웹개발을 한다면 Window에서 개발하여 WSL에 배포 테스트를 손쉽게? 할 수 있는 환경을 구축 할 수 있습니다. 예를 들어 웹의 경우 Backend, Frontend, DB 같은 환경을 Docker로 설정하여 WSL에 올린 뒤 바로 배포가 성공했다면 이러한 설정을 그대로 AWS나 Azure에 적용할 수 있습니다.
해당 글은 단지 커스텀에 대한 이야기이지만 추후 위와 같은 방법으로 배포테스트도 한 번 다뤄볼 생각입니다.</description>
    </item>
    
    <item>
      <title>JPA ddl-auto 설정과 더미데이터 생성 방법</title>
      <link>https://haservi.github.io/posts/spring/jpa/hibernate-ddl-auto/</link>
      <pubDate>Fri, 12 Nov 2021 15:47:31 +0900</pubDate>
      
      <guid>https://haservi.github.io/posts/spring/jpa/hibernate-ddl-auto/</guid>
      <description>ddl-auto 란 JPA에서는 기본적으로 Entity에 테이블을 매핑하면 쿼리를 사용하지 않고 값을 가져올 수 있습니다.
설정 옵션으로
jpa: hibernate: ddl-auto: create #create-drop, update, validate, none 각각의 옵션을 봐보면 아래와 같습니다.
 create : SessionFactory 시작시 스키마를 삭제하고 다시 생성 create-drop : SessionFactory 종료 시 스키마를 삭제 update : SessionFactory 연결된 DB와 비교하여 추가된 항목은 추가 만약 같은 변수명이면 오류발생 validate : SessionFactory 시작시 객체구성과 스키마가 다르다면 예외 발생 none: 아무것도 안함  실제 서비스 배포시에는 create, create-drop, update 와 같은 옵션을 사용하면 안되지만 개발 초기 테스트시에는 유용하게 사용할 수 있습니다.</description>
    </item>
    
    <item>
      <title>Gif로 영상 만드는 방법</title>
      <link>https://haservi.github.io/posts/tools/how-to-create-gif/</link>
      <pubDate>Sun, 07 Nov 2021 23:57:42 +0900</pubDate>
      
      <guid>https://haservi.github.io/posts/tools/how-to-create-gif/</guid>
      <description>들어가며 어떠한 물건에 대해 설명할 때 말보다 해당 물건을 보여주면 훨씬 빠른 이해가 될 수 있으며, 어느 정도 큰 흥미도 생기게 됩니다.
종종 어떤 블로그분들을 보면 gif로 구현 방법을 설명해주는데 처음에는 영상을 찍고, 해당 영상을 웹에서 변환하는 작업을 거치는 줄(물론 이렇게도 가능합니다.) 알았는데 훨씬 간편한 방법이 있어 공유 차원에 글을 적습니다.
저의 경우 Window 환경에서 작업하기 때문에 Window로 설치하는 방법에 대해 알아보겠습니다.
맥의 경우 아래 참조 블로그 링크를 이용하시면 해결할 수 있습니다.</description>
    </item>
    
    <item>
      <title>[프로그래머스]조이스틱</title>
      <link>https://haservi.github.io/posts/algorithms/programmers/level2/03-joystick/</link>
      <pubDate>Sun, 24 Oct 2021 22:41:45 +0900</pubDate>
      
      <guid>https://haservi.github.io/posts/algorithms/programmers/level2/03-joystick/</guid>
      <description>조이스틱 문제 설명 조이스틱으로 알파벳 이름을 완성하세요. 맨 처음엔 A로만 이루어져 있습니다.
ex) 완성해야 하는 이름이 세 글자면 AAA, 네 글자면 AAAA
조이스틱을 각 방향으로 움직이면 아래와 같습니다.
▲ - 다음 알파벳 ▼ - 이전 알파벳 (A에서 아래쪽으로 이동하면 Z로) ◀ - 커서를 왼쪽으로 이동 (첫 번째 위치에서 왼쪽으로 이동하면 마지막 문자에 커서) ▶ - 커서를 오른쪽으로 이동 예를 들어 아래의 방법으로 &amp;ldquo;JAZ&amp;quot;를 만들 수 있습니다.
- 첫 번째 위치에서 조이스틱을 위로 9번 조작하여 J를 완성합니다.</description>
    </item>
    
    <item>
      <title>[프로그래머스]다리를 지나는 트럭</title>
      <link>https://haservi.github.io/posts/algorithms/programmers/level2/02-truck-crossing-the-bridge/</link>
      <pubDate>Mon, 27 Sep 2021 15:17:54 +0900</pubDate>
      
      <guid>https://haservi.github.io/posts/algorithms/programmers/level2/02-truck-crossing-the-bridge/</guid>
      <description>다리를 지나는 트럭 문제 설명 트럭 여러 대가 강을 가로지르는 일차선 다리를 정해진 순으로 건너려 합니다.
모든 트럭이 다리를 건너려면 최소 몇 초가 걸리는지 알아내야 합니다.
다리에는 트럭이 최대 bridge_length대 올라갈 수 있으며, 다리는 weight 이하까지의 무게를 견딜 수 있습니다.
단, 다리에 완전히 오르지 않은 트럭의 무게는 무시합니다.
예를 들어, 트럭 2대가 올라갈 수 있고 무게를 10kg까지 견디는 다리가 있습니다. 무게가 [7, 4, 5, 6]kg인 트럭이 순서대로 최단 시간 안에 다리를 건너려면 다음과 같이 건너야 합니다.</description>
    </item>
    
    <item>
      <title>프로그래머스 Level1 문제풀이 후기</title>
      <link>https://haservi.github.io/posts/algorithms/programmers/review/clear-level1/</link>
      <pubDate>Wed, 15 Sep 2021 00:41:29 +0900</pubDate>
      
      <guid>https://haservi.github.io/posts/algorithms/programmers/review/clear-level1/</guid>
      <description>목표  하루에 하나씩 알고리즘을 풀며 개인 공부를 하면 뭐라도 도움이 되겠지.
 후기 전체적인 난이도는 기초적인 반복문을 이해하고 있으며, 간단한 자료구조를 알고 있으면 문제를 푸는데 큰 어려움은 없는 것 같습니다. 가끔씩 카카오 관련 코딩테스트가 아무래도 기존 문제보다 난이도가 조금은 더 있었던 것 같았으며, 그 외의 경우 하루에 하나씩 문제를 풀어도 큰 부담이 안됐던 것 같습니다.
Level1을 마무리하고 이제 Level2의 문제를 풀고 있는데 조금 난이도가 올라간 느낌입니다.
아무래도 Level1 보다는 조금 더 시간이 걸리고 뭔가 제 기초가 부족하다는 것을 느끼게 됐습니다.</description>
    </item>
    
    <item>
      <title>[프로그래머스]위장</title>
      <link>https://haservi.github.io/posts/algorithms/programmers/level2/01-camouflage/</link>
      <pubDate>Wed, 15 Sep 2021 00:28:00 +0900</pubDate>
      
      <guid>https://haservi.github.io/posts/algorithms/programmers/level2/01-camouflage/</guid>
      <description>위장 문제 설명 스파이들은 매일 다른 옷을 조합하여 입어 자신을 위장합니다.
예를 들어 스파이가 가진 옷이 아래와 같고 오늘 스파이가 동그란 안경, 긴 코트, 파란색 티셔츠를 입었다면 다음날은 청바지를 추가로 입거나 동그란 안경 대신 검정 선글라스를 착용하거나 해야 합니다.
   종류 이름     얼굴 동그란 안경, 검정 선글라스   상의 파란색 티셔츠   하의 청바지   겉옷 긴 코트    스파이가 가진 의상들이 담긴 2차원 배열 clothes가 주어질 때 서로 다른 옷의 조합의 수를 return 하도록 solution 함수를 작성해주세요.</description>
    </item>
    
    <item>
      <title>[프로그래머스]하샤드 수</title>
      <link>https://haservi.github.io/posts/algorithms/programmers/level1/04-algo-hasshadsu/</link>
      <pubDate>Tue, 07 Sep 2021 11:55:29 +0900</pubDate>
      
      <guid>https://haservi.github.io/posts/algorithms/programmers/level1/04-algo-hasshadsu/</guid>
      <description>하샤드 수 문제 설명 양의 정수 x가 하샤드 수이려면 x의 자릿수의 합으로 x가 나누어져야 합니다.
예를 들어 18의 자릿수 합은 1+8=9이고, 18은 9로 나누어 떨어지므로 18은 하샤드 수입니다.
자연수 x를 입력받아 x가 하샤드 수인지 아닌지 검사하는 함수, solution을 완성해주세요.
제한 조건  x는 1 이상, 10000 이하인 정수입니다.  입출력 예    arr return     10 true   12 true   11 false   13 false    입출력 예 설명 입출력 예 #1</description>
    </item>
    
    <item>
      <title>[프로그래머스]콜라츠 추측</title>
      <link>https://haservi.github.io/posts/algorithms/programmers/level1/03-algo-colatz-guess/</link>
      <pubDate>Mon, 06 Sep 2021 21:01:13 +0900</pubDate>
      
      <guid>https://haservi.github.io/posts/algorithms/programmers/level1/03-algo-colatz-guess/</guid>
      <description>콜라츠 추측 문제 설명 1937년 Collatz란 사람에 의해 제기된 이 추측은, 주어진 수가 1이 될때까지 다음 작업을 반복하면, 모든 수를 1로 만들 수 있다는 추측입니다. 작업은 다음과 같습니다.
1-1. 입력된 수가 짝수라면 2로 나눕니다. 1-2. 입력된 수가 홀수라면 3을 곱하고 1을 더합니다. 2. 결과로 나온 수에 같은 작업을 1이 될 때까지 반복합니다. 예를 들어, 입력된 수가 6이라면 6→3→10→5→16→8→4→2→1 이 되어 총 8번 만에 1이 됩니다.
위 작업을 몇 번이나 반복해야하는지 반환하는 함수, solution을 완성해 주세요.</description>
    </item>
    
    <item>
      <title>[프로그래머스]직업군 추천하기</title>
      <link>https://haservi.github.io/posts/algorithms/programmers/level1/02-algo-recommend-job/</link>
      <pubDate>Thu, 26 Aug 2021 20:53:37 +0900</pubDate>
      
      <guid>https://haservi.github.io/posts/algorithms/programmers/level1/02-algo-recommend-job/</guid>
      <description>직업군 추천하기 문제 설명 개발자가 사용하는 언어와 언어 선호도를 입력하면 그에 맞는 직업군을 추천해주는 알고리즘을 개발하려고 합니다.
아래 표는 5개 직업군 별로 많이 사용하는 5개 언어에 직업군 언어 점수를 부여한 표입니다.
   점수 SI CONTENTS HARDWARE PORTAL GAME     5 JAVA JAVASCRIPT C JAVA C++   4 JAVASCRIPT JAVA C++ JAVASCRIPT C#   3 SQL PYTHON PYTHON PYTHON JAVASCRIPT   2 PYTHON SQL JAVA KOTLIN C   1 C# C++ JAVASCRIPT PHP JAVA    예를 들면, SQL의 SI 직업군 언어 점수는 3점이지만 CONTENTS 직업군 언어 점수는 2점입니다.</description>
    </item>
    
    <item>
      <title>[프로그래머스]비밀지도</title>
      <link>https://haservi.github.io/posts/algorithms/programmers/level1/01-algo-secret-map/</link>
      <pubDate>Fri, 20 Aug 2021 01:31:31 +0900</pubDate>
      
      <guid>https://haservi.github.io/posts/algorithms/programmers/level1/01-algo-secret-map/</guid>
      <description>비밀지도 문제 설명 네오는 평소 프로도가 비상금을 숨겨놓는 장소를 알려줄 비밀지도를 손에 넣었다.
그런데 이 비밀지도는 숫자로 암호화되어 있어 위치를 확인하기 위해서는 암호를 해독해야 한다.
다행히 지도 암호를 해독할 방법을 적어놓은 메모도 함께 발견했다.
 지도는 한 변의 길이가 n인 정사각형 배열 형태로, 각 칸은 &amp;ldquo;공백&amp;rdquo;(&amp;quot; &amp;ldquo;) 또는 &amp;ldquo;벽&amp;rdquo;(&amp;quot;#&amp;quot;) 두 종류로 이루어져 있다. 전체 지도는 두 장의 지도를 겹쳐서 얻을 수 있다. 각각 &amp;ldquo;지도 1&amp;quot;과 &amp;ldquo;지도 2&amp;quot;라고 하자.
지도 1 또는 지도 2 중 어느 하나라도 벽인 부분은 전체 지도에서도 벽이다.</description>
    </item>
    
    <item>
      <title>블로그 시작하기</title>
      <link>https://haservi.github.io/posts/etc/start-blog/</link>
      <pubDate>Tue, 17 Aug 2021 21:00:00 +0900</pubDate>
      
      <guid>https://haservi.github.io/posts/etc/start-blog/</guid>
      <description>블로그 시작하기 최근 기억하는 것보다 잊혀져가는 것이 많아져 공부한 내용을 기록하기 위해 블로그를 다시 써보려 합니다.
이전에 티스토리에서 블로그를 했었는데 뭐랄까.. github에서 하는게 좀 더 관리하기가 편할 것 같아 이사하게 됐습니다. :D
주로 공부한 내용 또는 삽질 그리고 개발하면서 도움되는 팁에 대한 내용이 주를 이룰 것이라 생각합니다.
테마 선정 gihtub.io 안에서도 Gatsby, Jekyll, Hexo, Hugo와 같은 여러 테마가 있으며 이 중 Hugo를 사용하고 있습니다.
해당 블로그 테마는 PaperMod를 기본으로 하였으며, 조금 커스텀하여 사용중입니다.</description>
    </item>
    
  </channel>
</rss>
